import pytest
from helpers import get_footprint_datapath
from openghg.standardise.footprints import parse_paris
from openghg.types import ParseError


@pytest.mark.parametrize(
    "site,inlet,model,met_model,filename",
    [
        (
            "mhd",
            "10m",
            "NAME",
            "ukv",
            "MHD-10magl_NAME_UKV_TEST_inert_PARIS-format_201301.nc",
        ),

        (
            "mhd",
            "10m",
            "NAME",
            "ukv",
            "MHD-10magl_NAME_UKV_TEST_co2_PARIS-format_2013502.nc",
        ),

        (
            "mhd",
            "10m",
            "FLEXPART",
            "ecmwfhres",
            "MHD-10magl_FLEXPART_ECMWFHRES_TEST_inert_201809.nc",
        ),
    ],
)


def check_variables_exist(data, expected_vars):
    """
    Check if expected variables exist in an open NetCDF file.
    """
    existing_vars = data.variables.keys()
    missing_vars = [var for var in expected_vars if var not in existing_vars]
    return missing_vars

def check_dimensions_exist(data, expected_dims):
    """
    Check if expected dimensions exist in an open NetCDF file.
    """
    existing_dims = data.dims.keys()
    missing_dims = [dim for dim in expected_dims if dim not in existing_dims]
    return missing_dims

def test_paris_footprint(site, inlet, model, met_model, filename):
    """
    Test the parse_paris function is able to parse data in expected format.
    Also verifies the key generated by the parser.
    Note: Does not currently check data, just metadata.
    """
    fp_filepath = get_footprint_datapath(filename)

    domain = "test"
    species = ["inert", "co2"]

    for s in species:
        data = parse_paris(
            filepath=fp_filepath,
            site=site,
            domain=domain,
            inlet=inlet,
            model=model,
            met_model=met_model,
            species=s,
        )

        # TODO: Remove check after keys declaration is removed from the parsers
        expected_key = f"{site}_{domain}_{model}_{inlet}"
        assert expected_key in data

        fp_data = list(data.values())[0]

        v_data = fp_data["data"]

        expected_dims = ["lat", "lon", "time", "height"]
        expected_vars = ["fp"]

        if species == "co2":
            expected_dims.append("H_back")
            expected_vars.append("fp_time_resolved")
            expected_vars.append("fp_residual")


        missing_vars = check_variables_exist(v_data, expected_vars)
        assert not missing_vars, f"Missing variables in footprint file: {missing_vars}"

        missing_dims = check_dimensions_exist(v_data, expected_dims)
        assert not missing_dims, f"Missing dimensions in footprint file: {missing_dims}"
            
        metadata = fp_data["metadata"]

        expected_metadata = {
            "site": site,
            "inlet": inlet,
            "model": model,
            "domain": domain,
            "species": species,
            "data_type": "footprints",
        }

        assert metadata.items() >= expected_metadata.items()



    # TODO: Add data checks as required (may not be able to easily parameterize)


def test_paris_footprint_fail_message():
    """
    Test the parse_paris function raises a ParseError and advises using "acrg_org"
    source_format if 'fp' variable is detected.
    """
    fp_filepath = get_footprint_datapath("footprint_test.nc")

    site = "TMB"
    inlet = "10m"
    domain = "EUROPE"
    model = "test_model"
    species = "inert"

    with pytest.raises(ParseError) as exc:

        parse_paris(
            filepath=fp_filepath,
            site=site,
            domain=domain,
            inlet=inlet,
            model=model,
            species=species,
        )

        assert "need to use source_format='acrg_org'" in exc
