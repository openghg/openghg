name: OpenGHG tests

on:
  push:
    paths-ignore:
      - 'CHANGELOG.md'
  pull_request:
    branches: [master, devel]
    paths-ignore:
      - 'CHANGELOG.md'
  workflow_dispatch:

jobs:
  test:
    name: Run the tests
    runs-on: ${{ matrix.operating-system }}
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    strategy:
      max-parallel: 4
      fail-fast: false
      matrix:
        operating-system: [ubuntu-latest]
        python-version: ["3.10", "3.11", "3.12"]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"
      - name: Format code with black
        run: |
          python -m pip install black
          black --check openghg/
      - name: Lint with flake8
        run: |
          python -m pip install --upgrade pip wheel setuptools flake8
          flake8 openghg/ --count --statistics
      - name: Install openghg
        run: |
          pip install -r requirements-dev.txt
          pip install -r requirements.txt
          pip install .
      - name: Run mypy
        run: |
          mypy --python-version ${{ matrix.python-version }} openghg/
      - name: Create mock cdsapi config file
        run: |
          echo $'url: https://www.openghg.org\nkey: 00000:f5690ad7-test-test-test-6fb0573991ca\n' > ~/.cdsapirc
      - name: Install udunits package for CF compliance checks
        run: |
          sudo apt-get install libudunits2-0
      - name: Test with pytest
        run: |
          pip install --upgrade pytest
          pytest -v --run-cfchecks
  release_pypi:
    name: Build and publish Python distributions ðŸ“¦ to PyPI and TestPyPI
    runs-on: ubuntu-latest
    needs: ["test"]  # Removed "docs"
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: "pip"
      - name: Fetch specific tag
        run: |
          git fetch --tags

      - name: Set tag output
        id: get_tag
        run: |
          TAG_NAME="0.14.0"
          echo "Using tag $TAG_NAME"
          echo "tag=$TAG_NAME" >> $GITHUB_OUTPUT

      - name: Checkout tag
        run: |
          git checkout tags/${{ steps.get_tag.outputs.tag }}

      - name: Install pypa/build
        run: |
          pip install --upgrade build

      - name: Build a binary wheel and a source tarball
        run: |
          python -m build --sdist --wheel --outdir dist/

      - name: Publish distribution ðŸ“¦ to Test PyPI
        uses: pypa/gh-action-pypi-publish@f8c70e705ffc13c3b4d1221169b84f12a75d6ca8
        with:
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          repository_url: https://test.pypi.org/legacy/

      - name: Publish distribution ðŸ“¦ to PyPI
        uses: pypa/gh-action-pypi-publish@f8c70e705ffc13c3b4d1221169b84f12a75d6ca8
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
