name: OpenGHG tests

on:
  push:
    branches: [master, devel]
    tags:
      - "*"
    paths-ignore:
      - 'CHANGELOG.md'
  pull_request:
    branches: [master, devel]
    paths-ignore:
      - 'CHANGELOG.md'

jobs:
  test:
    name: Run the tests
    runs-on: ${{ matrix.operating-system }}
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    strategy:
      max-parallel: 4
      fail-fast: false
      matrix:
        operating-system: [ubuntu-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11"]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"
      - name: Lint with flake8
        run: |
          python -m pip install --upgrade pip wheel setuptools flake8
          flake8 openghg/ --count --statistics
      - name: Install openghg
        run: |
          pip install -r requirements-dev.txt
          pip install .
      - name: Run mypy
        run: |
          mypy --python-version ${{ matrix.python-version }} openghg/
      - name: Create mock cdsapi config file
        run: |
          echo $'url: https://www.openghg.org\nkey: 00000:f5690ad7-test-test-test-6fb0573991ca\n' > ~/.cdsapirc
      - name: Install udunits package for CF compliance checks
        run: |
          sudo apt-get install libudunits2-0
      - name: Test with pytest
        run: |
          pip install --upgrade pytest
          pytest --run-cfchecks --cov=./ --cov-report=xml
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          env_vars: ${{ matrix.operating-system }},PYTHON-{{ matrix.python-version }}
          fail_ci_if_error: false
          verbose: true
        if: matrix.python-version == 3.9 && matrix.operating-system == 'ubuntu-latest'
  docs:
    name: Build and deploy the documentation
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
    runs-on: ubuntu-latest
    needs: ["test"]
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"
          cache: "pip"
      - name: Install openghg
        run: |
          pip install --upgrade pip wheel setuptools
          pip install .
      - name: Setup default config
        run: openghg --default-config
      - name: Install pandoc and requirements
        run: |
          sudo apt-get install -yq pandoc
          pip install -r requirements-doc.txt
      - name: Build documentation
        run: |
          cd doc
          make
      - name: Deploy to GitHub pages
        uses: JamesIves/github-pages-deploy-action@v4.4.1
        with:
          branch: gh-pages
          folder: "doc/build/html"
          clean: true
  release_pypi:
    name: Build and publish Python distributions ðŸ“¦ to PyPI and TestPyPI
    runs-on: ubuntu-latest
    needs: ["test", "docs"]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"
          cache: "pip"
      - name: Install pypa/build
        run: |
          pip install --upgrade build
      - name: Build a binary wheel and a source tarball
        run: |
          python -m build --sdist --wheel --outdir dist/
      - name: Publish distribution ðŸ“¦ to Test PyPI
        uses: pypa/gh-action-pypi-publish@f8c70e705ffc13c3b4d1221169b84f12a75d6ca8
        with:
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          repository_url: https://test.pypi.org/legacy/
      - name: Publish distribution ðŸ“¦ to PyPI
        uses: pypa/gh-action-pypi-publish@f8c70e705ffc13c3b4d1221169b84f12a75d6ca8
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
  release_conda:
    name: Build and publish conda package
    runs-on: ubuntu-latest
    needs: ["test", "docs"]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
    defaults:
      run:
        shell: bash -el {0}
    steps:
      - uses: actions/checkout@v3
      - uses: mamba-org/setup-micromamba@875557da4ee020f18df03b8910a42203fbf02da1
        with:
          init-shell: bash
      - name: Build and push the conda package
        run: |
          micromamba create -n openghg_build anaconda-client boa -c conda-forge
          micromamba activate openghg_build
          conda config --append channels openghg
          mkdir ${{ github.workspace }}/build
          conda mambabuild --croot ${{ github.workspace }}/build recipes -c conda-forge
          BUILD_DIR=${GITHUB_WORKSPACE}/build
          BUILD=$(find "$BUILD_DIR" -name '*.tar.bz2')
          anaconda --token "$ANACONDA_TOKEN" upload --user openghg --label main "$BUILD"
        env:
          ANACONDA_TOKEN: ${{ secrets.ANACONDA_TOKEN }}
