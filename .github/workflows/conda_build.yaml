name: OpenGHG Conda Build with tests

on:
  push:
    branches: [master, devel]
    tags:
      - "*"
  pull_request:
    branches: [master, devel]

jobs:
    test:
        name: Run the tests
        runs-on: ${{ matrix.operating-system }}
        if: "!contains(github.event.head_commit.message, '[skip ci]')"
        strategy:
          max-parallel: 4
          fail-fast: false
          matrix:
            operating-system: [ubuntu-latest]
            python-version: ["3.8", "3.9", "3.10"]
        steps:
          - name: Checkout
            uses: actions/checkout@v3
          - name: Set up Python ${{ matrix.python-version }}
            uses: actions/setup-python@v4
            with:
              python-version: ${{ matrix.python-version }}
              cache: "pip"
          - name: Lint with flake8
            run: |
              python -m pip install --upgrade pip wheel setuptools flake8
              flake8 openghg/ --count --statistics
          - name: Install openghg
            run: |
              pip install -r requirements-dev.txt
              pip install .
          - name: Run mypy
            run: |
              mypy --python-version ${{ matrix.python-version }} openghg/
          - name: Create mock cdsapi config file
            run: |
              echo $'url: https://www.openghg.org\nkey: 00000:f5690ad7-test-test-test-6fb0573991ca\n' > ~/.cdsapirc
          - name: Install udunits package for CF compliance checks
            run: |
              sudo apt-get install libudunits2-0
          - name: Test with pytest
            run: |
              pip install --upgrade pytest
              pytest --run-cfchecks --cov=./ --cov-report=xml
          - name: Upload coverage to Codecov
            uses: codecov/codecov-action@v3
            with:
              env_vars: ${{ matrix.operating-system }},PYTHON-{{ matrix.python-version }}
              fail_ci_if_error: false
              verbose: true
            if: matrix.python-version == 3.9 && matrix.operating-system == 'ubuntu-latest'
      
  
  
    # # test:
    # name: Run pytest
    # runs-on: ubuntu-latest

    # steps:
    # - name: Checkout code
    #   uses: actions/checkout@v2

    # - name: Set up Miniconda
    #   uses: conda-incubator/setup-miniconda@v2
    #   with:
    #     auto_update_conda: false
    #     auto_activate_base: false
    #     miniconda_version: 'latest'  # Use 'latest' for the latest version or specify a specific version (e.g., '4.10.3')

    # - name: Create Conda environment
    #   run: conda env create -f environment.yml

    # - name: Activate Conda environment
    #   run: conda activate my_environment

    # - name: Run pytest
    #   run: pytest path/to/your/tests/test.py  # Replace with the path to your test script
