---
jupytext:
  formats: ipynb,md:myst
  text_representation:
    extension: .md
    format_name: myst
    format_version: 0.13
    jupytext_version: 1.13.6
kernelspec:
  display_name: Python 3
  language: python
  name: python3
---

## Plotting basics

+++

OpenGHG provides some simple plotting functionality to make it easy to plot the data you retrieve from the object store. To do that we use [Plotly](https://plotly.com/) which makes nice looking, responsive graphs easily. We also show how you can access the raw data that can be used with your favourite plotting library.

As in the previous tutorial we'll start by setting up a temporary object store.

```{code-cell} ipython3
import os
import tempfile

from openghg.client import process_files, search
from openghg.util import retrieve_example_data

tmp_dir = tempfile.TemporaryDirectory()
os.environ["OPENGHG_PATH"] = tmp_dir.name   # temporary directory
```

### Find some data

First we need to retrieve some data to plot. Here we download some data from our [example data repository](https://github.com/openghg/example_data) and then process it for storage in the object store.

```{code-cell} ipython3
bsd_datafile = retrieve_example_data(path="timeseries/bsd_example.tar.gz")

decc_results = process_files(files=bsd_datafile, data_type="CRDS", site="bsd", network="DECC")
```

Now we can retrieve some data and make a quick plot

```{code-cell} ipython3
search_results = search(site="bsd", species="co2")
```

```{code-cell} ipython3
search_results
```

```{code-cell} ipython3
bsd_co2_data = search_results.retrieve(site="bsd", species="co2")
```

Have a quick look at the `ObsData` object that gets returned by the `retrieve` function.

```{code-cell} ipython3
bsd_co2_data
```

Now we create a quick plot using the `plot_timeseries` member of `ObsData`. You can pass any of `title`, `xlabel`, `ylabel` and `units` to this function.

Note: the plot below may not show up on the online documentation version of this notebook.

```{code-cell} ipython3
bsd_co2_data.plot_timeseries(units="ppm")
```

#### Clean up

If you used the `tmp_dir` as a location for your object store at the start of the tutorial you can run the cell below to remove any files that were created to make sure any persistant data is refreshed when the notebook is re-run.

```{code-cell} ipython3
tmp_dir.cleanup()
```
