Traceback (most recent call last):
  File "/opt/hostedtoolcache/Python/3.9.15/x64/lib/python3.9/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/opt/hostedtoolcache/Python/3.9.15/x64/lib/python3.9/site-packages/nbclient/client.py", line 1204, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/opt/hostedtoolcache/Python/3.9.15/x64/lib/python3.9/site-packages/nbclient/util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/opt/hostedtoolcache/Python/3.9.15/x64/lib/python3.9/site-packages/nbclient/util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "/opt/hostedtoolcache/Python/3.9.15/x64/lib/python3.9/asyncio/base_events.py", line 647, in run_until_complete
    return future.result()
  File "/opt/hostedtoolcache/Python/3.9.15/x64/lib/python3.9/site-packages/nbclient/client.py", line 663, in async_execute
    await self.async_execute_cell(
  File "/opt/hostedtoolcache/Python/3.9.15/x64/lib/python3.9/site-packages/nbclient/client.py", line 965, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/opt/hostedtoolcache/Python/3.9.15/x64/lib/python3.9/site-packages/nbclient/client.py", line 862, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
populate_footprint_inert()
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mIndexError[0m                                Traceback (most recent call last)
File [0;32m/opt/hostedtoolcache/Python/3.9.15/x64/lib/python3.9/site-packages/xarray/backends/api.py:1226[0m, in [0;36mto_netcdf[0;34m(dataset, path_or_file, mode, format, group, engine, encoding, unlimited_dims, compute, multifile, invalid_netcdf)[0m
[1;32m   1223[0m [38;5;28;01mtry[39;00m:
[1;32m   1224[0m     [38;5;66;03m# TODO: allow this work (setting up the file for writing array data)[39;00m
[1;32m   1225[0m     [38;5;66;03m# to be parallelized with dask[39;00m
[0;32m-> 1226[0m     [43mdump_to_store[49m[43m([49m
[1;32m   1227[0m [43m        [49m[43mdataset[49m[43m,[49m[43m [49m[43mstore[49m[43m,[49m[43m [49m[43mwriter[49m[43m,[49m[43m [49m[43mencoding[49m[38;5;241;43m=[39;49m[43mencoding[49m[43m,[49m[43m [49m[43munlimited_dims[49m[38;5;241;43m=[39;49m[43munlimited_dims[49m
[1;32m   1228[0m [43m    [49m[43m)[49m
[1;32m   1229[0m     [38;5;28;01mif[39;00m autoclose:

File [0;32m/opt/hostedtoolcache/Python/3.9.15/x64/lib/python3.9/site-packages/xarray/backends/api.py:1273[0m, in [0;36mdump_to_store[0;34m(dataset, store, writer, encoder, encoding, unlimited_dims)[0m
[1;32m   1271[0m     variables, attrs [38;5;241m=[39m encoder(variables, attrs)
[0;32m-> 1273[0m [43mstore[49m[38;5;241;43m.[39;49m[43mstore[49m[43m([49m[43mvariables[49m[43m,[49m[43m [49m[43mattrs[49m[43m,[49m[43m [49m[43mcheck_encoding[49m[43m,[49m[43m [49m[43mwriter[49m[43m,[49m[43m [49m[43munlimited_dims[49m[38;5;241;43m=[39;49m[43munlimited_dims[49m[43m)[49m

File [0;32m/opt/hostedtoolcache/Python/3.9.15/x64/lib/python3.9/site-packages/xarray/backends/common.py:267[0m, in [0;36mAbstractWritableDataStore.store[0;34m(self, variables, attributes, check_encoding_set, writer, unlimited_dims)[0m
[1;32m    266[0m [38;5;28mself[39m[38;5;241m.[39mset_dimensions(variables, unlimited_dims[38;5;241m=[39munlimited_dims)
[0;32m--> 267[0m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mset_variables[49m[43m([49m
[1;32m    268[0m [43m    [49m[43mvariables[49m[43m,[49m[43m [49m[43mcheck_encoding_set[49m[43m,[49m[43m [49m[43mwriter[49m[43m,[49m[43m [49m[43munlimited_dims[49m[38;5;241;43m=[39;49m[43munlimited_dims[49m
[1;32m    269[0m [43m[49m[43m)[49m

File [0;32m/opt/hostedtoolcache/Python/3.9.15/x64/lib/python3.9/site-packages/xarray/backends/common.py:305[0m, in [0;36mAbstractWritableDataStore.set_variables[0;34m(self, variables, check_encoding_set, writer, unlimited_dims)[0m
[1;32m    304[0m check [38;5;241m=[39m vn [38;5;129;01min[39;00m check_encoding_set
[0;32m--> 305[0m target, source [38;5;241m=[39m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mprepare_variable[49m[43m([49m
[1;32m    306[0m [43m    [49m[43mname[49m[43m,[49m[43m [49m[43mv[49m[43m,[49m[43m [49m[43mcheck[49m[43m,[49m[43m [49m[43munlimited_dims[49m[38;5;241;43m=[39;49m[43munlimited_dims[49m
[1;32m    307[0m [43m[49m[43m)[49m
[1;32m    309[0m writer[38;5;241m.[39madd(source, target)

File [0;32m/opt/hostedtoolcache/Python/3.9.15/x64/lib/python3.9/site-packages/xarray/backends/scipy_.py:226[0m, in [0;36mScipyDataStore.prepare_variable[0;34m(self, name, variable, check_encoding, unlimited_dims)[0m
[1;32m    225[0m [38;5;28;01mif[39;00m name [38;5;129;01mnot[39;00m [38;5;129;01min[39;00m [38;5;28mself[39m[38;5;241m.[39mds[38;5;241m.[39mvariables:
[0;32m--> 226[0m     [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mds[49m[38;5;241;43m.[39;49m[43mcreateVariable[49m[43m([49m[43mname[49m[43m,[49m[43m [49m[43mdata[49m[38;5;241;43m.[39;49m[43mdtype[49m[43m,[49m[43m [49m[43mvariable[49m[38;5;241;43m.[39;49m[43mdims[49m[43m)[49m
[1;32m    227[0m scipy_var [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39mds[38;5;241m.[39mvariables[name]

File [0;32m/opt/hostedtoolcache/Python/3.9.15/x64/lib/python3.9/site-packages/scipy/io/_netcdf.py:387[0m, in [0;36mnetcdf_file.createVariable[0;34m(self, name, type, dimensions)[0m
[1;32m    386[0m data [38;5;241m=[39m empty(shape_, dtype[38;5;241m=[39m[38;5;28mtype[39m[38;5;241m.[39mnewbyteorder([38;5;124m"[39m[38;5;124mB[39m[38;5;124m"[39m))  [38;5;66;03m# convert to big endian always for NetCDF 3[39;00m
[0;32m--> 387[0m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mvariables[49m[43m[[49m[43mname[49m[43m][49m [38;5;241m=[39m netcdf_variable(
[1;32m    388[0m         data, typecode, size, shape, dimensions,
[1;32m    389[0m         maskandscale[38;5;241m=[39m[38;5;28mself[39m[38;5;241m.[39mmaskandscale)
[1;32m    390[0m [38;5;28;01mreturn[39;00m [38;5;28mself[39m[38;5;241m.[39mvariables[name]

[0;31mIndexError[0m: only integers, slices (`:`), ellipsis (`...`), numpy.newaxis (`None`) and integer or boolean arrays are valid indices

During handling of the above exception, another exception occurred:

[0;31mAttributeError[0m                            Traceback (most recent call last)
Cell [0;32mIn [2], line 1[0m
[0;32m----> 1[0m [43mpopulate_footprint_inert[49m[43m([49m[43m)[49m

File [0;32m/opt/hostedtoolcache/Python/3.9.15/x64/lib/python3.9/site-packages/openghg/tutorial/_tutorial.py:61[0m, in [0;36mpopulate_footprint_inert[0;34m()[0m
[1;32m     58[0m domain [38;5;241m=[39m [38;5;124m"[39m[38;5;124mEUROPE[39m[38;5;124m"[39m
[1;32m     59[0m model [38;5;241m=[39m [38;5;124m"[39m[38;5;124mNAME[39m[38;5;124m"[39m
[0;32m---> 61[0m [43mstandardise_footprint[49m[43m([49m
[1;32m     62[0m [43m    [49m[43mfilepath[49m[38;5;241;43m=[39;49m[43mtac_inert_path[49m[43m,[49m[43m [49m[43msite[49m[38;5;241;43m=[39;49m[43msite[49m[43m,[49m[43m [49m[43mheight[49m[38;5;241;43m=[39;49m[43mheight[49m[43m,[49m[43m [49m[43mdomain[49m[38;5;241;43m=[39;49m[43mdomain[49m[43m,[49m[43m [49m[43mmodel[49m[38;5;241;43m=[39;49m[43mmodel[49m
[1;32m     63[0m [43m[49m[43m)[49m

File [0;32m/opt/hostedtoolcache/Python/3.9.15/x64/lib/python3.9/site-packages/openghg/standardise/_standardise.py:265[0m, in [0;36mstandardise_footprint[0;34m(filepath, site, height, domain, model, metmodel, species, network, period, chunks, continuous, retrieve_met, high_spatial_res, high_time_res, overwrite)[0m
[1;32m    263[0m     [38;5;28;01mreturn[39;00m response_content
[1;32m    264[0m [38;5;28;01melse[39;00m:
[0;32m--> 265[0m     [38;5;28;01mreturn[39;00m [43mFootprints[49m[38;5;241;43m.[39;49m[43mread_file[49m[43m([49m
[1;32m    266[0m [43m        [49m[43mfilepath[49m[38;5;241;43m=[39;49m[43mfilepath[49m[43m,[49m
[1;32m    267[0m [43m        [49m[43msite[49m[38;5;241;43m=[39;49m[43msite[49m[43m,[49m
[1;32m    268[0m [43m        [49m[43mheight[49m[38;5;241;43m=[39;49m[43mheight[49m[43m,[49m
[1;32m    269[0m [43m        [49m[43mdomain[49m[38;5;241;43m=[39;49m[43mdomain[49m[43m,[49m
[1;32m    270[0m [43m        [49m[43mmodel[49m[38;5;241;43m=[39;49m[43mmodel[49m[43m,[49m
[1;32m    271[0m [43m        [49m[43mmetmodel[49m[38;5;241;43m=[39;49m[43mmetmodel[49m[43m,[49m
[1;32m    272[0m [43m        [49m[43mspecies[49m[38;5;241;43m=[39;49m[43mspecies[49m[43m,[49m
[1;32m    273[0m [43m        [49m[43mnetwork[49m[38;5;241;43m=[39;49m[43mnetwork[49m[43m,[49m
[1;32m    274[0m [43m        [49m[43mperiod[49m[38;5;241;43m=[39;49m[43mperiod[49m[43m,[49m
[1;32m    275[0m [43m        [49m[43mchunks[49m[38;5;241;43m=[39;49m[43mchunks[49m[43m,[49m
[1;32m    276[0m [43m        [49m[43mcontinuous[49m[38;5;241;43m=[39;49m[43mcontinuous[49m[43m,[49m
[1;32m    277[0m [43m        [49m[43mretrieve_met[49m[38;5;241;43m=[39;49m[43mretrieve_met[49m[43m,[49m
[1;32m    278[0m [43m        [49m[43mhigh_spatial_res[49m[38;5;241;43m=[39;49m[43mhigh_spatial_res[49m[43m,[49m
[1;32m    279[0m [43m        [49m[43mhigh_time_res[49m[38;5;241;43m=[39;49m[43mhigh_time_res[49m[43m,[49m
[1;32m    280[0m [43m        [49m[43moverwrite[49m[38;5;241;43m=[39;49m[43moverwrite[49m[43m,[49m
[1;32m    281[0m [43m    [49m[43m)[49m

File [0;32m/opt/hostedtoolcache/Python/3.9.15/x64/lib/python3.9/site-packages/openghg/store/_footprints.py:380[0m, in [0;36mFootprints.read_file[0;34m(filepath, site, domain, model, inlet, height, metmodel, species, network, period, chunks, continuous, retrieve_met, high_spatial_res, high_time_res, short_lifetime, overwrite)[0m
[1;32m    377[0m lookup_results [38;5;241m=[39m datasource_lookup(metastore[38;5;241m=[39mmetastore, data[38;5;241m=[39mfootprint_data, required_keys[38;5;241m=[39mrequired)
[1;32m    379[0m data_type [38;5;241m=[39m [38;5;124m"[39m[38;5;124mfootprints[39m[38;5;124m"[39m
[0;32m--> 380[0m datasource_uuids: Dict[[38;5;28mstr[39m, Dict] [38;5;241m=[39m [43massign_data[49m[43m([49m
[1;32m    381[0m [43m    [49m[43mdata_dict[49m[38;5;241;43m=[39;49m[43mfootprint_data[49m[43m,[49m
[1;32m    382[0m [43m    [49m[43mlookup_results[49m[38;5;241;43m=[39;49m[43mlookup_results[49m[43m,[49m
[1;32m    383[0m [43m    [49m[43moverwrite[49m[38;5;241;43m=[39;49m[43moverwrite[49m[43m,[49m
[1;32m    384[0m [43m    [49m[43mdata_type[49m[38;5;241;43m=[39;49m[43mdata_type[49m[43m,[49m
[1;32m    385[0m [43m[49m[43m)[49m
[1;32m    387[0m fp[38;5;241m.[39madd_datasources(uuids[38;5;241m=[39mdatasource_uuids, data[38;5;241m=[39mfootprint_data, metastore[38;5;241m=[39mmetastore)
[1;32m    389[0m [38;5;66;03m# Record the file hash in case we see this file again[39;00m

File [0;32m/opt/hostedtoolcache/Python/3.9.15/x64/lib/python3.9/site-packages/openghg/store/_segment.py:51[0m, in [0;36massign_data[0;34m(data_dict, lookup_results, overwrite, data_type)[0m
[1;32m     49[0m datasource[38;5;241m.[39madd_data(metadata[38;5;241m=[39mmetadata, data[38;5;241m=[39mdata, overwrite[38;5;241m=[39moverwrite, data_type[38;5;241m=[39mdata_type)
[1;32m     50[0m [38;5;66;03m# Save Datasource to object store[39;00m
[0;32m---> 51[0m [43mdatasource[49m[38;5;241;43m.[39;49m[43msave[49m[43m([49m[43m)[49m
[1;32m     53[0m new_datasource [38;5;241m=[39m uuid [38;5;129;01mis[39;00m [38;5;28;01mFalse[39;00m
[1;32m     54[0m uuids[key] [38;5;241m=[39m {[38;5;124m"[39m[38;5;124muuid[39m[38;5;124m"[39m: datasource[38;5;241m.[39muuid(), [38;5;124m"[39m[38;5;124mnew[39m[38;5;124m"[39m: new_datasource}

File [0;32m/opt/hostedtoolcache/Python/3.9.15/x64/lib/python3.9/site-packages/openghg/store/base/_datasource.py:550[0m, in [0;36mDatasource.save[0;34m(self, bucket)[0m
[1;32m    547[0m     [38;5;28;01mif[39;00m [38;5;129;01mnot[39;00m parent_folder[38;5;241m.[39mexists():
[1;32m    548[0m         parent_folder[38;5;241m.[39mmkdir(parents[38;5;241m=[39m[38;5;28;01mTrue[39;00m, exist_ok[38;5;241m=[39m[38;5;28;01mTrue[39;00m)
[0;32m--> 550[0m     [43mdata[49m[38;5;241;43m.[39;49m[43mto_netcdf[49m[43m([49m[43mfilepath[49m[43m)[49m
[1;32m    552[0m     [38;5;66;03m# Can we just take the bytes from the data here and then write then straight?[39;00m
[1;32m    553[0m     [38;5;66;03m# TODO - for now just create a temporary directory - will have to update Acquire[39;00m
[1;32m    554[0m     [38;5;66;03m# or work on a PR for xarray to allow returning a NetCDF as bytes[39;00m
[0;32m   (...)[0m
[1;32m    560[0m 
[1;32m    561[0m [38;5;66;03m# Copy the last version[39;00m
[1;32m    562[0m [38;5;28;01mif[39;00m [38;5;124m"[39m[38;5;124mlatest[39m[38;5;124m"[39m [38;5;129;01min[39;00m [38;5;28mself[39m[38;5;241m.[39m_data_keys:

File [0;32m/opt/hostedtoolcache/Python/3.9.15/x64/lib/python3.9/site-packages/xarray/core/dataset.py:1890[0m, in [0;36mDataset.to_netcdf[0;34m(self, path, mode, format, group, engine, encoding, unlimited_dims, compute, invalid_netcdf)[0m
[1;32m   1887[0m     encoding [38;5;241m=[39m {}
[1;32m   1888[0m [38;5;28;01mfrom[39;00m [38;5;21;01m.[39;00m[38;5;21;01m.[39;00m[38;5;21;01mbackends[39;00m[38;5;21;01m.[39;00m[38;5;21;01mapi[39;00m [38;5;28;01mimport[39;00m to_netcdf
[0;32m-> 1890[0m [38;5;28;01mreturn[39;00m [43mto_netcdf[49m[43m([49m[43m  [49m[38;5;66;43;03m# type: ignore  # mypy cannot resolve the overloads:([39;49;00m
[1;32m   1891[0m [43m    [49m[38;5;28;43mself[39;49m[43m,[49m
[1;32m   1892[0m [43m    [49m[43mpath[49m[43m,[49m
[1;32m   1893[0m [43m    [49m[43mmode[49m[38;5;241;43m=[39;49m[43mmode[49m[43m,[49m
[1;32m   1894[0m [43m    [49m[38;5;28;43mformat[39;49m[38;5;241;43m=[39;49m[38;5;28;43mformat[39;49m[43m,[49m
[1;32m   1895[0m [43m    [49m[43mgroup[49m[38;5;241;43m=[39;49m[43mgroup[49m[43m,[49m
[1;32m   1896[0m [43m    [49m[43mengine[49m[38;5;241;43m=[39;49m[43mengine[49m[43m,[49m
[1;32m   1897[0m [43m    [49m[43mencoding[49m[38;5;241;43m=[39;49m[43mencoding[49m[43m,[49m
[1;32m   1898[0m [43m    [49m[43munlimited_dims[49m[38;5;241;43m=[39;49m[43munlimited_dims[49m[43m,[49m
[1;32m   1899[0m [43m    [49m[43mcompute[49m[38;5;241;43m=[39;49m[43mcompute[49m[43m,[49m
[1;32m   1900[0m [43m    [49m[43mmultifile[49m[38;5;241;43m=[39;49m[38;5;28;43;01mFalse[39;49;00m[43m,[49m
[1;32m   1901[0m [43m    [49m[43minvalid_netcdf[49m[38;5;241;43m=[39;49m[43minvalid_netcdf[49m[43m,[49m
[1;32m   1902[0m [43m[49m[43m)[49m

File [0;32m/opt/hostedtoolcache/Python/3.9.15/x64/lib/python3.9/site-packages/xarray/backends/api.py:1242[0m, in [0;36mto_netcdf[0;34m(dataset, path_or_file, mode, format, group, engine, encoding, unlimited_dims, compute, multifile, invalid_netcdf)[0m
[1;32m   1240[0m [38;5;28;01mfinally[39;00m:
[1;32m   1241[0m     [38;5;28;01mif[39;00m [38;5;129;01mnot[39;00m multifile [38;5;129;01mand[39;00m compute:
[0;32m-> 1242[0m         [43mstore[49m[38;5;241;43m.[39;49m[43mclose[49m[43m([49m[43m)[49m
[1;32m   1244[0m [38;5;28;01mif[39;00m [38;5;129;01mnot[39;00m compute:
[1;32m   1245[0m     [38;5;28;01mimport[39;00m [38;5;21;01mdask[39;00m

File [0;32m/opt/hostedtoolcache/Python/3.9.15/x64/lib/python3.9/site-packages/xarray/backends/scipy_.py:240[0m, in [0;36mScipyDataStore.close[0;34m(self)[0m
[1;32m    239[0m [38;5;28;01mdef[39;00m [38;5;21mclose[39m([38;5;28mself[39m):
[0;32m--> 240[0m     [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_manager[49m[38;5;241;43m.[39;49m[43mclose[49m[43m([49m[43m)[49m

File [0;32m/opt/hostedtoolcache/Python/3.9.15/x64/lib/python3.9/site-packages/xarray/backends/file_manager.py:224[0m, in [0;36mCachingFileManager.close[0;34m(self, needs_lock)[0m
[1;32m    222[0m file [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39m_cache[38;5;241m.[39mpop([38;5;28mself[39m[38;5;241m.[39m_key, default)
[1;32m    223[0m [38;5;28;01mif[39;00m file [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m:
[0;32m--> 224[0m     [43mfile[49m[38;5;241;43m.[39;49m[43mclose[49m[43m([49m[43m)[49m

File [0;32m/opt/hostedtoolcache/Python/3.9.15/x64/lib/python3.9/site-packages/scipy/io/_netcdf.py:292[0m, in [0;36mnetcdf_file.close[0;34m(self)[0m
[1;32m    290[0m [38;5;28;01mif[39;00m [38;5;28mhasattr[39m([38;5;28mself[39m, [38;5;124m'[39m[38;5;124mfp[39m[38;5;124m'[39m) [38;5;129;01mand[39;00m [38;5;129;01mnot[39;00m [38;5;28mself[39m[38;5;241m.[39mfp[38;5;241m.[39mclosed:
[1;32m    291[0m     [38;5;28;01mtry[39;00m:
[0;32m--> 292[0m         [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mflush[49m[43m([49m[43m)[49m
[1;32m    293[0m     [38;5;28;01mfinally[39;00m:
[1;32m    294[0m         [38;5;28mself[39m[38;5;241m.[39mvariables [38;5;241m=[39m {}

File [0;32m/opt/hostedtoolcache/Python/3.9.15/x64/lib/python3.9/site-packages/scipy/io/_netcdf.py:402[0m, in [0;36mnetcdf_file.flush[0;34m(self)[0m
[1;32m    393[0m [38;5;124;03m"""[39;00m
[1;32m    394[0m [38;5;124;03mPerform a sync-to-disk flush if the `netcdf_file` object is in write mode.[39;00m
[1;32m    395[0m 
[0;32m   (...)[0m
[1;32m    399[0m 
[1;32m    400[0m [38;5;124;03m"""[39;00m
[1;32m    401[0m [38;5;28;01mif[39;00m [38;5;28mhasattr[39m([38;5;28mself[39m, [38;5;124m'[39m[38;5;124mmode[39m[38;5;124m'[39m) [38;5;129;01mand[39;00m [38;5;28mself[39m[38;5;241m.[39mmode [38;5;129;01min[39;00m [38;5;124m'[39m[38;5;124mwa[39m[38;5;124m'[39m:
[0;32m--> 402[0m     [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_write[49m[43m([49m[43m)[49m

File [0;32m/opt/hostedtoolcache/Python/3.9.15/x64/lib/python3.9/site-packages/scipy/io/_netcdf.py:411[0m, in [0;36mnetcdf_file._write[0;34m(self)[0m
[1;32m    408[0m [38;5;28mself[39m[38;5;241m.[39mfp[38;5;241m.[39mwrite(array([38;5;28mself[39m[38;5;241m.[39mversion_byte, [38;5;124m'[39m[38;5;124m>b[39m[38;5;124m'[39m)[38;5;241m.[39mtobytes())
[1;32m    410[0m [38;5;66;03m# Write headers and data.[39;00m
[0;32m--> 411[0m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_write_numrecs[49m[43m([49m[43m)[49m
[1;32m    412[0m [38;5;28mself[39m[38;5;241m.[39m_write_dim_array()
[1;32m    413[0m [38;5;28mself[39m[38;5;241m.[39m_write_gatt_array()

File [0;32m/opt/hostedtoolcache/Python/3.9.15/x64/lib/python3.9/site-packages/scipy/io/_netcdf.py:418[0m, in [0;36mnetcdf_file._write_numrecs[0;34m(self)[0m
[1;32m    416[0m [38;5;28;01mdef[39;00m [38;5;21m_write_numrecs[39m([38;5;28mself[39m):
[1;32m    417[0m     [38;5;66;03m# Get highest record count from all record variables.[39;00m
[0;32m--> 418[0m     [38;5;28;01mfor[39;00m var [38;5;129;01min[39;00m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mvariables[49m[38;5;241;43m.[39;49m[43mvalues[49m():
[1;32m    419[0m         [38;5;28;01mif[39;00m var[38;5;241m.[39misrec [38;5;129;01mand[39;00m [38;5;28mlen[39m(var[38;5;241m.[39mdata) [38;5;241m>[39m [38;5;28mself[39m[38;5;241m.[39m_recs:
[1;32m    420[0m             [38;5;28mself[39m[38;5;241m.[39m[38;5;18m__dict__[39m[[38;5;124m'[39m[38;5;124m_recs[39m[38;5;124m'[39m] [38;5;241m=[39m [38;5;28mlen[39m(var[38;5;241m.[39mdata)

[0;31mAttributeError[0m: 'numpy.ndarray' object has no attribute 'values'
AttributeError: 'numpy.ndarray' object has no attribute 'values'

