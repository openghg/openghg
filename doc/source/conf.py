# type: ignore
# flake8: noqa
# Configuration file for the Sphinx documentation builder.
#
# This file only contains a selection of the most common options. For a full
# list see the documentation:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
import sys
import os
from pathlib import Path

script_dir = Path(__file__).resolve(strict=True)
# OpenGHG directory for import
openghg_dir = script_dir.parent.parent.parent
# Add to sys path for import
sys.path.insert(0, str(openghg_dir))

import openghg

# -- Project information -----------------------------------------------------

project = "OpenGHG"
copyright = "2023 OpenGHG development team"
author = "OpenGHG development team"

# -- General configuration ---------------------------------------------------

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = []

# Add any paths that contain templates here, relative to this directory.
templates_path = ["_templates"]

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This pattern also affects html_static_path and html_extra_path.
exclude_patterns = []

extensions = [
    "sphinx.ext.napoleon",
    "sphinx_togglebutton",
    "sphinx.ext.mathjax",
    "sphinx.ext.autodoc",
    "sphinx.ext.viewcode",
    "sphinx.ext.autosummary",
    "sphinx.ext.autosectionlabel",
    "sphinx.ext.mathjax",
    "sphinx_autodoc_typehints",
    "sphinxcontrib.programoutput",
    "sphinx_issues",
    "IPython.sphinxext.ipython_console_highlighting",
]

# -- Options for HTML output -------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
html_theme = "pydata_sphinx_theme"

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ["_static"]

# Github repo
issues_github_path = "openghg/openghg"
# The master toctree document.
master_doc = "index"
# The suffix of source filenames.
source_suffix = ".rst"

# autoapi_type = "python"
# autoapi_dirs = ["../../openghg"]
# autoapi_ignore = ["*interface/*", "*data/*"]
# autoapi_options = ['members', 'undoc-members', 'show-inheritance', 'show-module-summary', 'special-members']
# autoapi_member_order = ['alphabetical']

branch = os.getenv("OPENGHG_BRANCH", None)

if branch is None:
    version = openghg.__version__.split("+")[0]
    # The full version, including alpha/beta/rc tags.
    release = openghg.__version__
    branch = openghg.__branch__
    revisionid = openghg.__revisionid__
    repository = openghg.__repository__
else:
    version = os.getenv("OPENGHG_VERSION")
    release = os.getenv("OPENGHG_RELEASE")
    revisionid = os.getenv("OPENGHG_REVISIONID")
    repository = os.getenv("OPENGHG_REPOSITORY")

print(f"repository = {repository}")
print(f"branch = {branch}")
print(f"revisionid = {revisionid}")
print(f"version = {version} : RELEASE = {release}")

# Replace all "|OpenGHGVersion|" with the version number
rst_epilog = f".. |OpenGHGVersion| replace:: {version}"

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
language = "en"

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
exclude_patterns = ["_build", "*_test*"]

# The reST default role (used for this markup: `text`) to use for all documents.
default_role = "autolink"

# If true, '()' will be appended to :func: etc. cross-reference text.
add_function_parentheses = True

# If true, sectionauthor and moduleauthor directives will be shown in the
# output. They are ignored by default.
show_authors = False

# The name of the Pygments (syntax highlighting) style to use.
# pygments_style = "sphinx"

# html_theme = "sphinx_rtd_theme"

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
# html_theme_options = {
#     "logo_only": True,
#     "display_version": False,
#     "prev_next_buttons_location": "both",
#     "style_external_links": False,
#     "style_nav_header_background": "",
# }

# The name for this set of Sphinx documents.  If None, it defaults to
# "<project> v<release> documentation".
# html_title = "OpenGHG Documentation"

# A shorter title for the navigation bar.  Default is the same as html_title.
# html_short_title = "OpenGHG"

# The name of an image file (within the static path) to use as favicon of the
# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
# pixels large.
# html_favicon = "favicons/favicon.ico"

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ["_static"]
# The name of an image file (relative to this directory) to place at the top
# of the sidebar.
html_logo = "./images/OpenGHG_Logo_NoText.png"

html_theme_options = {
    "logo": {
        "image_light": "./images/OpenGHG_Logo_NoText.png",
        "image_dark": "./images/OpenGHG_Logo_NoText.png",
    }
}

html_css_files = ["custom.css"]
html_js_files = ["custom.js"]

# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,
# using the given strftime format.
html_last_updated_fmt = "%b %d, %Y"

# If true, SmartyPants will be used to convert quotes and dashes to
# typographically correct entities.
html_use_smartypants = True

# If true, links to the reST sources are added to the pages.
html_show_sourcelink = False

# If true, "Created using Sphinx" is shown in the HTML footer. Default is True.
html_show_sphinx = False

# If true, "(C) Copyright ..." is shown in the HTML footer. Default is True.
html_show_copyright = True

# htmlhelp_basename = "OpenGHGdoc"

autosummary_generate = True
autodoc_default_options = {
    "members": None,  # Include all members (methods).
    "special-members": None,
    "exclude-members": "__dict__,__weakref__",  # Exclude "standard" methods.
}

# spell checking
spelling_lang = "en_US"
spelling_word_list_filename = "spelling_wordlist.txt"
spelling_show_suggestions = True


# try to exclude deprecated
def skip_deprecated(app, what, name, obj, skip, options):
    if hasattr(obj, "func_dict") and "__deprecated__" in obj.func_dict:
        print("skipping " + name)
        return True
    return skip or False


def setup(app):
    app.connect("autodoc-skip-member", skip_deprecated)
    try:
        from sphinx.ext.autosummary import Autosummary
        from sphinx.ext.autosummary import get_documenter
        from docutils.parsers.rst import directives
        from sphinx.util.inspect import safe_getattr

        class AutoAutoSummary(Autosummary):

            option_spec = {
                "methods": directives.unchanged,
                "attributes": directives.unchanged,
            }

            required_arguments = 1

            @staticmethod
            def get_members(obj, typ, include_public=None):
                if include_public is None:
                    include_public = []
                items = []
                for name in dir(obj):
                    try:
                        documenter = get_documenter(app, safe_getattr(obj, name), obj)
                    except AttributeError:
                        continue
                    if documenter.objtype == typ:
                        items.append(name)
                public = [x for x in items if x in include_public or not x.startswith("_")]
                return public, items

            def run(self):
                clazz = self.arguments[0]
                try:
                    (module_name, class_name) = clazz.rsplit(".", 1)
                    m = __import__(module_name, globals(), locals(), [class_name])
                    c = getattr(m, class_name)
                    if "methods" in self.options:
                        _, methods = self.get_members(c, "method", ["__init__"])

                        self.content = [
                            "~%s.%s" % (clazz, method) for method in methods if not method.startswith("_")
                        ]
                    if "attributes" in self.options:
                        _, attribs = self.get_members(c, "attribute")
                        self.content = [
                            "~%s.%s" % (clazz, attrib) for attrib in attribs if not attrib.startswith("_")
                        ]
                finally:
                    return super(AutoAutoSummary, self).run()

        app.add_directive("autoautosummary", AutoAutoSummary)
    except BaseException as e:
        raise e


# Napoleon settings
napoleon_google_docstring = True
napoleon_numpy_docstring = True
napoleon_include_private_with_doc = False
napoleon_include_special_with_doc = False
napoleon_use_admonition_for_examples = False
napoleon_use_admonition_for_notes = False
napoleon_use_admonition_for_references = False
napoleon_use_ivar = True
napoleon_use_param = True
napoleon_use_rtype = True
